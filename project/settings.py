"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 3.2.15.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
from pathlib import Path

from django.utils.translation import gettext_lazy as _

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-^i&z(c%5t4a2taw)wupz%ha+%=56yov2(-2ua(!^6g=a*0v222'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = eval(os.environ.get('DEBUG', 'True'))

if DEBUG:
    ALLOWED_HOSTS = ['*']
else:
    ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'jazzmin',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'core',
    'admins',
    'website',
    'api',
    'rest_framework',
    'rest_framework.authtoken',
    'drf_api_logger',
    'import_export',
    'django.contrib.sites',
    'django.contrib.sitemaps',
    'django_crontab',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',  # This must be after session and before common
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'drf_api_logger.middleware.api_logger_middleware.APILoggerMiddleware',
]

ROOT_URLCONF = 'project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'core.context_processors.admin_header_processor',
                'website.context_processors.website_context',
            ],
        },
    },
]

WSGI_APPLICATION = 'project.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
        'HOST': '',
        'PORT': '',
        'USER': '',
        'PASSWORD': ''
    }
    #     "default": {
    #         "ENGINE": os.environ.get("SQL_ENGINE", "django.db.backends.postgresql"),
    #         "NAME": os.environ.get("SQL_DATABASE", "postgres"),
    #         "USER": os.environ.get("SQL_USER", "postgres"),
    #         "PASSWORD": os.environ.get("SQL_PASSWORD", "postgrespw"),
    #         "HOST": os.environ.get("SQL_HOST", "172.16.170.148"),
    #         "PORT": os.environ.get("SQL_PORT", "8075"),
    #     }
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en'

LANGUAGES = [
    ('en', _('English')),
    ('ar', _('Arabic')),
]

LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale'),
]

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

DRF_API_LOGGER_DATABASE = True
DRF_API_LOGGER_TIMEDELTA = 120
DRF_API_LOGGER_SLOW_API_ABOVE = 200

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES':
        ['rest_framework.authentication.SessionAuthentication',
         'rest_framework.authentication.TokenAuthentication',
         ],
    'DEFAULT_PERMISSION_CLASSES':
        ['rest_framework.permissions.IsAuthenticated'],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 100,
    'DATETIME_FORMAT': "%Y-%m-%d %I:%M%p",
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
}

# Localization

MEDIA_URL = '/media/'
MEDIA_ROOT = '/media/'
STATIC_ROOT = '/static/'

EMAIL_HOST = os.getenv('EMAIL_HOST', 'mail.ghabbour.com')
EMAIL_USE_TLS = True
EMAIL_PORT = os.getenv('EMAIL_PORT', '587')
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', 'app.test@ghabbour.com')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', 'uTg7iS_kCc8fTh_')
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
        'LOCATION': 'cache_table',
    }
}

SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

CORS_ALLOWED_ORIGINS = [
    'http://gb-pcbe.ghabbour.com:8070'
]

IMPORT_EXPORT_SKIP_ADMIN_LOG = True
IMPORT_EXPORT_USE_TRANSACTIONS = True
DATA_UPLOAD_MAX_NUMBER_FIELDS = None

SITE_ID = 1

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]

USE_THOUSAND_SEPARATOR = True

JAZZMIN_SETTINGS = {
    "custom_css": "css/admin-custom.css",
    "site_logo": "img/logo.svg",
    "site_logo_classes": "",
}

if DEBUG:
    JAZZMIN_SETTINGS.update({
        "site_title": "Project (Test)",
        "site_header": "Project (Test)",
        "welcome_sign": "Welcome to Project (Test)",
    })
else:
    JAZZMIN_SETTINGS.update({
        "site_title": "Project",
        "site_header": "Project",
        "welcome_sign": "Welcome to Project",
    })

CRONJOBS = [
    ('0 0 * * *', 'core.crons.purge_logs', '>> /var/log/cron.log 2>&1'),
]

CRONTAB_LOCK_JOBS = True
CRONTAB_COMMAND_PREFIX = f"DEBUG={DEBUG}"
if 'postgresql' in DATABASES['default']['ENGINE']:
    CRONTAB_COMMAND_PREFIX += f" SQL_HOST={DATABASES['default']['HOST']} SQL_PORT={DATABASES['default']['PORT']} SQL_DATABASE={DATABASES['default']['NAME']} SQL_USER={DATABASES['default']['USER']} SQL_PASSWORD={DATABASES['default']['PASSWORD']}"
